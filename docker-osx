#!/bin/bash
#
# docker-osx
# ==========
#
# Easy installation of Docker on OS X
# https://github.com/noplay/docker-osx
#
# Copyright 2013 Julien Duponchelle
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

set -e

export DOCKER_PORT="4243"

export DOCKER_VERSION="0.7.5"
export DOCKER_CLIENT_URL="http://get.docker.io/builds/Darwin/x86_64/docker-0.7.5.tgz"

export DOCKER_VM_NAME="docker-boot2docker"
export DOCKER_VM_SSH_PORT="2022"
export DOCKER_VM_CWD="$HOME/.docker-osx"

export VBM="VBoxManage"

export DOCKER_BIN="$(dirname $0)/docker"
export DOCKER_HOST="tcp://localhost:$DOCKER_PORT"

log() {
  echo "[`date +"%Y-%m-%d %H:%M:%S"`] ${*}"
}

err() {
  echo "[`date +"%Y-%m-%d %H:%M:%S"`] ERROR: ${*}" >&2
  exit 1
}

if [ ! -d $DOCKER_VM_CWD ]; then
  log "Creating ${DOCKER_VM_CWD}"
  mkdir -p "$DOCKER_VM_CWD"
fi

help() {
  echo "docker-osx commands:"
  echo "    start [--pristine]    Start local docker virtual machine"
  echo "    stop  [--delete]      Halt docker daemon and virtual machine"
  echo "    info                  VirtualBox virtual machine information"
  echo "    shell                 Open a shell with Docker VM started and environnement set"
  echo ""
  echo "    Anything else is assumed to be a docker command and will be run on the virtual machine with \`docker <args>\'"
  echo ""
}

boot2docker_get_latest_release_name() {
  curl 'https://api.github.com/repos/steeve/boot2docker/releases' 2>/dev/null | grep "tag_name" | awk '{print $2}' | sed 's/[",]*//g' | head -1
}

boot2docker_download_latest() {
  LATEST_RELEASE=`boot2docker_get_latest_release_name`
  log "Latest boot2docker version is $LATEST_RELEASE, downloading..."
  curl -L -o "${DOCKER_VM_CWD}/boot2docker.iso" "https://github.com/steeve/boot2docker/releases/download/$LATEST_RELEASE/boot2docker.iso"
  log "Done"
}

init() {
  VM_MEM=1024
  VM_OSTYPE=Linux26_64
  VM_NIC=82540EM
  VM_DISK=./boot2docker.vmdk
  VM_DISK_SIZE=40000
  VM_CPUS=`sysctl -n hw.physicalcpu`
  BOOT2DOCKER_ISO="${DOCKER_VM_CWD}/boot2docker.iso"

  log "Creating VM $DOCKER_VM_NAME"
  $VBM createvm --name $DOCKER_VM_NAME --register >/dev/null 2>&1

  log "Setting VM settings"
  $VBM modifyvm $DOCKER_VM_NAME \
    --ostype $VM_OSTYPE \
    --cpus $VM_CPUS \
    --memory $VM_MEM \
    --acpi on \
    --hpet on \
    --hwvirtex on \
    --firmware bios \
    --bioslogofadein off --bioslogofadeout off --bioslogodisplaytime 0 --biosbootmenu disabled \
    --boot1 dvd

  log "Setting VM networking"
  $VBM modifyvm $DOCKER_VM_NAME \
    --nic1 nat \
    --nictype1 $VM_NIC \
    --cableconnected1 on

  log "Creating VM NAT"
  $VBM modifyvm $DOCKER_VM_NAME \
    --natpf1 "ssh,tcp,127.0.0.1,$DOCKER_VM_SSH_PORT,,22" \
    --natpf1 "docker,tcp,127.0.0.1,$DOCKER_PORT,,$DOCKER_PORT"

  if [ ! -e $BOOT2DOCKER_ISO ]; then
    log "boot2docker.iso not found."
    boot2docker_download_latest
  fi

  log "Setting VM disks"

  if [ -f $VM_DISK ]; then
    log "$VM_DISK was open, closing"
    $VBM closemedium disk $VM_DISK
  else
    log "Creating $VM_DISK_SIZE hard drive..."
    $VBM createhd --format VMDK --filename $VM_DISK --size $VM_DISK_SIZE >/dev/null 2>&1
  fi

  $VBM storagectl $DOCKER_VM_NAME --name "SATA" --add sata --hostiocache on >/dev/null 2>&1
  $VBM storageattach $DOCKER_VM_NAME --storagectl "SATA" --port 0 --device 0 --type dvddrive --medium $BOOT2DOCKER_ISO >/dev/null 2>&1
  $VBM storageattach $DOCKER_VM_NAME --storagectl "SATA" --port 1 --device 0 --type hdd --medium $VM_DISK >/dev/null 2>&1

  log "Done."
}

delete() {
  if vm_exists; then
    log "Deleting VM ${DOCKER_VM_NAME}"
    $VBM unregistervm $DOCKER_VM_NAME --delete >/dev/null 2>&1
  else
    log "The VM doesn't exist"
  fi

  log "Remove SSH key fingerprint for VM"
  ssh-keygen -R '[localhost]:2022' >/dev/null 2>&1
}

do_ssh() {
  start
  ssh -p $DOCKER_VM_SSH_PORT docker@localhost "$@"
}

start() {
  if [ $# -eq 1 ] && [ "$1" = "--pristine" ]; then
    delete
  fi

  if ! vm_exists; then
    init
  fi

  if ! vm_is_running; then
    log "Starting $DOCKER_VM_NAME..."
    $VBM startvm $DOCKER_VM_NAME --type headless >/dev/null &
    wait_vm
    log "Started."
  else
    log "$DOCKER_VM_NAME is already running."
  fi
}

wait_vm() {
  while ! echo "ping" | nc localhost $DOCKER_VM_SSH_PORT >/dev/null 2>&1; do
    sleep 1
  done
}

stop() {
  if vm_exists; then
    if vm_is_stopped; then
      log "virtual machine ${DOCKER_VM_NAME} is not running."
    else
      log "Shutting down virtual machine $DOCKER_VM_NAME..."
      $VBM controlvm $DOCKER_VM_NAME poweroff >/dev/null 2>&1
    fi

    if [ $# -eq 1 ] && [ "$1" = "--delete" ]; then
      delete
    fi
  else
    err "virtual machine ${DOCKER_VM_NAME} does not exist, nothing to do."
  fi
}

vm_exists() {
  $VBM list vms | grep "\"docker-boot2docker\"" >/dev/null
}

info() {
  $VBM showvminfo $DOCKER_VM_NAME
}

vm_is_running() {
  info | grep "State:\s\+running" > /dev/null
}

vm_is_stopped() {
  info | grep "State:\s\+powered off" > /dev/null
}

status() {
  if vm_is_running; then
    log "$DOCKER_VM_NAME is running."
    exit 0
  else
    log "$DOCKER_VM_NAME is stopped."
    exit 1
  fi
}

# Determine currently installed version of Docker
INSTALLED_DOCKER_VERSION=""
if [ -f $DOCKER_VM_CWD/.docker-version ]
then
  INSTALLED_DOCKER_VERSION=`cat $DOCKER_VM_CWD/.docker-version`
fi

# Download Docker client if it doesn't exist or needs updating
if [[ ! -f "$DOCKER_BIN" || $INSTALLED_DOCKER_VERSION != $DOCKER_VERSION ]]
then
  echo "Installing Docker $DOCKER_VERSION client..."
  mkdir -p "$DOCKER_VM_CWD/bin"
  curl "$DOCKER_CLIENT_URL" > /tmp/docker-osx-client.tgz
  tar -xzf /tmp/docker-osx-client.tgz -C "$(dirname $DOCKER_BIN)" usr/local/bin/docker
  mv "$(dirname $DOCKER_BIN)/usr/local/bin/docker" "$DOCKER_BIN"
  rm -rf "$(dirname $DOCKER_BIN)/usr"
  chmod +x "$DOCKER_BIN"
fi

# Set current installed Docker version
echo $DOCKER_VERSION > $DOCKER_VM_CWD/.docker-version

case $1 in
  start) shift; start "$@" ;;
  stop) shift; stop "$@" ;;

  info) info;;

  shell) do_ssh;;

  help) help;;

  *) start && ./docker -H "$DOCKER_HOST" "$@";;
esac
